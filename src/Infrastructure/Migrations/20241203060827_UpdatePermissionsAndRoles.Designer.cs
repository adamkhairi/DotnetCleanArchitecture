// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241203060827_UpdatePermissionsAndRoles")]
    partial class UpdatePermissionsAndRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee2f4b2-5bb8-4947-981a-97bca94e8a57"),
                            Description = "Access user information",
                            Name = "users:access"
                        },
                        new
                        {
                            Id = new Guid("535f24e5-e504-424c-bb4e-81c269f67dec"),
                            Description = "Create users",
                            Name = "users:create"
                        },
                        new
                        {
                            Id = new Guid("4a60a5f3-e685-416f-9c99-10c39f031781"),
                            Description = "Update users",
                            Name = "users:update"
                        },
                        new
                        {
                            Id = new Guid("5c744dec-50a5-4741-97ce-7ed0d4feec56"),
                            Description = "Delete users",
                            Name = "users:delete"
                        },
                        new
                        {
                            Id = new Guid("e5afbca2-ec03-4f45-bb3b-692b41eeff3f"),
                            Description = "Access todos",
                            Name = "todos:access"
                        },
                        new
                        {
                            Id = new Guid("ed624861-d9b1-452b-b0d0-d8c4c8f727da"),
                            Description = "Create todos",
                            Name = "todos:create"
                        },
                        new
                        {
                            Id = new Guid("aa9eac9c-a1be-44fb-b3f2-9d8e5f4fa98e"),
                            Description = "Update todos",
                            Name = "todos:update"
                        },
                        new
                        {
                            Id = new Guid("745368b3-e73d-4e30-af4b-0769f05f0206"),
                            Description = "Delete todos",
                            Name = "todos:delete"
                        },
                        new
                        {
                            Id = new Guid("962efce7-fd30-4b15-ab1f-b807c109fc8d"),
                            Description = "Read roles",
                            Name = "roles:read"
                        },
                        new
                        {
                            Id = new Guid("7671eade-590d-45a0-b974-784c8420094f"),
                            Description = "Create and modify roles",
                            Name = "roles:write"
                        },
                        new
                        {
                            Id = new Guid("122ccd43-5714-4d28-8710-87b07dbab217"),
                            Description = "Delete roles",
                            Name = "roles:delete"
                        },
                        new
                        {
                            Id = new Guid("01732287-b3b0-47fd-935f-9ae8a4ccbe0d"),
                            Description = "Assign roles to users",
                            Name = "roles:assign"
                        },
                        new
                        {
                            Id = new Guid("8b6be42a-4ac2-48a1-baca-cc9c6a40a5d6"),
                            Description = "Read permissions",
                            Name = "permissions:read"
                        },
                        new
                        {
                            Id = new Guid("48547579-ac7e-453c-88c1-d9664f44c499"),
                            Description = "Grant permissions",
                            Name = "permissions:grant"
                        },
                        new
                        {
                            Id = new Guid("a43e2b4a-fc03-45d2-ad63-bb96d3fbecfd"),
                            Description = "Revoke permissions",
                            Name = "permissions:revoke"
                        });
                });

            modelBuilder.Entity("Domain.Permissions.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("permission_id");

                    b.HasKey("UserId", "PermissionId")
                        .HasName("pk_user_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_user_permissions_permission_id");

                    b.ToTable("user_permissions", (string)null);
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5451540-cc26-49ce-8456-ac649c57d387"),
                            Description = "Administrator role with full access",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c1e99be1-fcae-4581-a31e-064f29d94038"),
                            Description = "Viewer role with read-only access",
                            Name = "Viewer"
                        },
                        new
                        {
                            Id = new Guid("8d398087-6e41-4aeb-aa0d-a8ea5d2265e0"),
                            Description = "Regular user role",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed");

                    b.Property<string>("Labels")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("labels");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_items");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_todo_items_user_id");

                    b.ToTable("todo_items", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("permissions_id");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roles_id");

                    b.HasKey("PermissionsId", "RolesId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("RolesId")
                        .HasDatabaseName("ix_role_permissions_roles_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionsId = new Guid("aee2f4b2-5bb8-4947-981a-97bca94e8a57"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("535f24e5-e504-424c-bb4e-81c269f67dec"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("4a60a5f3-e685-416f-9c99-10c39f031781"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("5c744dec-50a5-4741-97ce-7ed0d4feec56"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("e5afbca2-ec03-4f45-bb3b-692b41eeff3f"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("ed624861-d9b1-452b-b0d0-d8c4c8f727da"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("aa9eac9c-a1be-44fb-b3f2-9d8e5f4fa98e"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("745368b3-e73d-4e30-af4b-0769f05f0206"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("962efce7-fd30-4b15-ab1f-b807c109fc8d"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("7671eade-590d-45a0-b974-784c8420094f"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("122ccd43-5714-4d28-8710-87b07dbab217"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("01732287-b3b0-47fd-935f-9ae8a4ccbe0d"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("8b6be42a-4ac2-48a1-baca-cc9c6a40a5d6"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("48547579-ac7e-453c-88c1-d9664f44c499"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("a43e2b4a-fc03-45d2-ad63-bb96d3fbecfd"),
                            RolesId = new Guid("d5451540-cc26-49ce-8456-ac649c57d387")
                        },
                        new
                        {
                            PermissionsId = new Guid("aee2f4b2-5bb8-4947-981a-97bca94e8a57"),
                            RolesId = new Guid("c1e99be1-fcae-4581-a31e-064f29d94038")
                        },
                        new
                        {
                            PermissionsId = new Guid("e5afbca2-ec03-4f45-bb3b-692b41eeff3f"),
                            RolesId = new Guid("c1e99be1-fcae-4581-a31e-064f29d94038")
                        },
                        new
                        {
                            PermissionsId = new Guid("962efce7-fd30-4b15-ab1f-b807c109fc8d"),
                            RolesId = new Guid("c1e99be1-fcae-4581-a31e-064f29d94038")
                        },
                        new
                        {
                            PermissionsId = new Guid("8b6be42a-4ac2-48a1-baca-cc9c6a40a5d6"),
                            RolesId = new Guid("c1e99be1-fcae-4581-a31e-064f29d94038")
                        },
                        new
                        {
                            PermissionsId = new Guid("aee2f4b2-5bb8-4947-981a-97bca94e8a57"),
                            RolesId = new Guid("8d398087-6e41-4aeb-aa0d-a8ea5d2265e0")
                        },
                        new
                        {
                            PermissionsId = new Guid("e5afbca2-ec03-4f45-bb3b-692b41eeff3f"),
                            RolesId = new Guid("8d398087-6e41-4aeb-aa0d-a8ea5d2265e0")
                        },
                        new
                        {
                            PermissionsId = new Guid("ed624861-d9b1-452b-b0d0-d8c4c8f727da"),
                            RolesId = new Guid("8d398087-6e41-4aeb-aa0d-a8ea5d2265e0")
                        },
                        new
                        {
                            PermissionsId = new Guid("aa9eac9c-a1be-44fb-b3f2-9d8e5f4fa98e"),
                            RolesId = new Guid("8d398087-6e41-4aeb-aa0d-a8ea5d2265e0")
                        },
                        new
                        {
                            PermissionsId = new Guid("745368b3-e73d-4e30-af4b-0769f05f0206"),
                            RolesId = new Guid("8d398087-6e41-4aeb-aa0d-a8ea5d2265e0")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_user_roles_users_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Permissions.UserPermission", b =>
                {
                    b.HasOne("Domain.Permissions.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_permissions_permission_id");

                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_users_user_id");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_items_users_user_id");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Domain.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permissions_id");

                    b.HasOne("Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_roles_id");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_id");

                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_users_id");
                });
#pragma warning restore 612, 618
        }
    }
}
